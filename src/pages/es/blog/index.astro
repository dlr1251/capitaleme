---
import Layout from "../../../layouts/Layout.astro";
import { getNotionDatabase } from '../../../utils/notion';
import BlogExplorer from '../../../components/es/blog/BlogExplorer.jsx';
import type { BlogPost } from '../../../components/es/blog/BlogCard.tsx';
import type { PageObjectResponse } from '@notionhq/client/build/src/api-endpoints';

type NotionPage = PageObjectResponse & {
  properties: {
    Nombre: {
      type: 'title';
      title: Array<{
        type: 'text';
        text: {
          content: string;
        };
        plain_text: string;
      }>;
    };
    Description: {
      type: 'rich_text';
      rich_text: Array<{
        type: 'text';
        text: {
          content: string;
        };
        plain_text: string;
        annotations?: {
          bold?: boolean;
          italic?: boolean;
          strikethrough?: boolean;
          underline?: boolean;
          code?: boolean;
          color?: string;
        };
        href?: string;
      }>;
    };
    Content: {
      type: 'rich_text';
      rich_text: Array<{
        type: 'text';
        text: {
          content: string;
        };
        plain_text: string;
        annotations?: {
          bold?: boolean;
          italic?: boolean;
          strikethrough?: boolean;
          underline?: boolean;
          code?: boolean;
          color?: string;
        };
        href?: string;
      }>;
    };
    Lang: {
      type: 'select';
      select: {
        name: string;
      } | null;
    };
    Published: {
      type: 'checkbox';
      checkbox: boolean;
    };
    Featured: {
      type: 'checkbox';
      checkbox: boolean;
    };
  };
  icon?: {
    type: 'emoji';
    emoji: string;
  };
  cover?: {
    type: 'external';
    external: {
      url: string;
    };
  } | {
    type: 'file';
    file: {
      url: string;
    };
  };
  last_edited_time: string;
};

// Helper function to render rich text
function renderRichText(richText: Array<{
  type: 'text';
  text: {
    content: string;
  };
  plain_text: string;
  annotations?: {
    bold?: boolean;
    italic?: boolean;
    strikethrough?: boolean;
    underline?: boolean;
    code?: boolean;
    color?: string;
  };
  href?: string;
}>) {
  return richText.map((item) => {
    let content = item.text.content;
    let className = '';

    if (item.annotations?.bold) className += 'font-bold ';
    if (item.annotations?.italic) className += 'italic ';
    if (item.annotations?.strikethrough) className += 'line-through ';
    if (item.annotations?.underline) className += 'underline ';
    if (item.annotations?.code) className += 'font-mono bg-gray-100 px-1 rounded ';
    if (item.annotations?.color && item.annotations.color !== 'default') className += `text-${item.annotations.color}-600 `;

    if (item.href) {
      return `<a href="${item.href}" class="${className}">${content}</a>`;
    }

    return `<span class="${className}">${content}</span>`;
  }).join('');
}

// Helper function to format relative time in Spanish
function getRelativeTime(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffInMs = now.getTime() - date.getTime();
  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));
  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));

  if (diffInDays > 0) {
    return diffInDays === 1 ? 'hace 1 día' : `hace ${diffInDays} días`;
  } else if (diffInHours > 0) {
    return diffInHours === 1 ? 'hace 1 hora' : `hace ${diffInHours} horas`;
  } else if (diffInMinutes > 0) {
    return diffInMinutes === 1 ? 'hace 1 minuto' : `hace ${diffInMinutes} minutos`;
  } else {
    return 'Ahora mismo';
  }
}

// Fetch Notion database content
const databaseId = '2130a3cd15e38019bc9fce1432312c6c';
const allPages = await getNotionDatabase(databaseId) as NotionPage[];

// Filter for Spanish posts only and published posts
const pages = allPages.filter(page => {
  const langValue = page.properties.Lang?.select?.name;
  const isSpanish = langValue === "Es" || langValue === "ES" || langValue === "Spanish";
  const isPublished = page.properties.Published?.checkbox === true;
  
  return isSpanish && isPublished;
});

// Map NotionPage[] to BlogPost[]
const blogPosts: BlogPost[] = pages.map(page => ({
  id: page.id,
  properties: page.properties as BlogPost['properties'],
  icon: page.icon,
  last_edited_time: page.last_edited_time,
  cover: page.cover
}));
---

<Layout title="Blog - Capital EME">
  <BlogExplorer client:load posts={blogPosts} />
</Layout> 