---
export const prerender = true;
import Layout from "../../../../layouts/Layout.astro";
import { getCollection, render } from "astro:content";
import PropertyGallery from 'components/real-estate/PropertyGallery.tsx';
import Calculator from 'components/real-estate/Calculator.tsx';

export async function getStaticPaths() {
  const properties = await getCollection('properties', (entry) => typeof entry.data.lang === 'string' && entry.data.lang === 'en');
  return properties.map(property => ({
    params: { slug: property.slug },
    props: { property },
  }));
}

const { property } = Astro.props;

if (!property) {
  return Astro.redirect('/en/real-estate');
}

const { Content, headings } = await render(property);
const propertyData = property.data;
const pageTitle = propertyData.title || 'Property Title';

// Explicitly type images as PropertyImage[]
const images: { url: string; alt: string; description: string; }[] = (propertyData.images || []).map((img) => ({
  url: img.url,
  alt: img.alt || pageTitle,
  description: 'description' in img && typeof img.description === 'string' ? img.description : ''
}));

const customBreadcrumbs = [
  { label: 'Home', href: '/en' },
  { label: 'Real Estate', href: '/en/real-estate' },
  { label: propertyData.title || 'Property Title' }
];

const lang = 'en';

---

<Layout title={pageTitle} lang={lang}>
  <!-- Hero Section with Large Image -->
  <div class="relative w-full h-[70vh] overflow-hidden">
    <img 
      src={propertyData.mainImage || '/images/placeholder.jpg'} 
      alt={propertyData.title || 'Property Image'} 
      class="w-full h-full object-cover object-center"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent"></div>
    <!-- Property Title Overlay -->
    <div class="absolute bottom-0 left-0 p-8 z-10">
      <h1 class="text-4xl md:text-6xl font-extrabold text-white drop-shadow-lg mb-4">{propertyData.title || 'Property Title'}</h1>
      <div class="flex items-center gap-4 mb-6">
        <span class="inline-block bg-primary text-white px-6 py-2 rounded-full text-lg font-semibold shadow-lg">
          {propertyData.location || 'Unknown location'}
        </span>
        <span class={`inline-block px-4 py-2 rounded-full text-sm font-bold shadow-lg ${
          propertyData.status === 'available' ? 'bg-green-500 text-white' : 
          propertyData.status === 'sold' ? 'bg-red-500 text-white' : 
          'bg-yellow-500 text-white'
        }`}>
          {propertyData.status ? propertyData.status.charAt(0).toUpperCase() + propertyData.status.slice(1) : 'Unknown'}
        </span>
      </div>
    </div>
  </div>
  <!-- Property Info & CTA Section -->
  <div class="bg-white py-12">
    <div class="max-w-6xl mx-auto px-4">
      <div class="grid lg:grid-cols-3 gap-8 items-center">
        <!-- Price & Details -->
        <div class="lg:col-span-2">
          <div class="flex flex-wrap gap-8 mb-6">
            <div class="text-center">
              <div class="text-4xl md:text-5xl font-extrabold text-primary mb-2">
                ${propertyData.price?.usd?.toLocaleString() || 'N/A'}
              </div>
              <div class="text-lg text-gray-600">USD</div>
              <div class="text-sm text-gray-500">({propertyData.price?.cop?.toLocaleString() || 'N/A'} COP)</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-secondary mb-2">{propertyData.area?.total || 0} {propertyData.area?.unit || ''}</div>
              <div class="text-gray-600">Total Area</div>
            </div>
            {propertyData.bedrooms && (
              <div class="text-center">
                <div class="text-3xl font-bold text-secondary mb-2">{propertyData.bedrooms || 0}</div>
                <div class="text-gray-600">Bedrooms</div>
              </div>
            )}
            {propertyData.bathrooms && (
              <div class="text-center">
                <div class="text-3xl font-bold text-secondary mb-2">{propertyData.bathrooms || 0}</div>
                <div class="text-gray-600">Bathrooms</div>
              </div>
            )}
            <div class="text-center">
              <div class="text-2xl font-bold text-secondary mb-2">{propertyData.propertyType || 'Property'}</div>
              <div class="text-gray-600">Type</div>
            </div>
          </div>
          <PropertyGallery images={images} />
        </div>
        <!-- Calculator -->
        <div>
          <Calculator client:load initialValue={propertyData.price?.cop} lang="en" />
        </div>
      </div>
    </div>
  </div>
  <!-- Markdown Content -->
  <div class="max-w-4xl mx-auto px-4 py-12">
    <Content />
  </div>
</Layout> 