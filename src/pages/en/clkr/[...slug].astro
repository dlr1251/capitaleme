---
import { getNotionPage, getNotionDatabase } from '../../../utils/notion';
import Layout from '../../../layouts/Layout.astro';
import NotionBlock from '../../../components/NotionBlock.astro';
import { Client } from '@notionhq/client';
import type { PageObjectResponse } from '@notionhq/client/build/src/api-endpoints';

export const prerender = true;

export async function getStaticPaths() {
  // Get all Notion pages that match our criteria
  const notionDatabaseId = '20d0a3cd15e38169928fff5c6f2b219c';
  const notionContent = await getNotionDatabase(notionDatabaseId);

  return notionContent.map((item: any) => {
    const title = item.properties?.['Topic Name']?.title[0]?.plain_text || 'Untitled';
    const slug = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
    
    return {
      params: { slug },
      props: { 
        pageId: item.id,
        title,
        url: item.url,
        lastEdited: item.last_edited_time,
        icon: item.icon
      }
    };
  });
}

const { pageId, title, url, lastEdited, icon } = Astro.props;
const page = await getNotionPage(pageId) as PageObjectResponse;
console.log('Notion Page Data:', {
  id: pageId,
  title,
  url,
  lastEdited,
  icon,
  pageProperties: page.properties
});

// Fetch the page blocks
const notion = new Client({
  auth: import.meta.env.NOTION_API_KEY,
});

const blocks = await notion.blocks.children.list({
  block_id: pageId,
  page_size: 100,
});
console.log('Notion Blocks:', blocks.results);

// Function to fetch children blocks recursively
async function fetchChildrenBlocks(blockId: string) {
  const response = await notion.blocks.children.list({
    block_id: blockId,
    page_size: 100,
  });
  
  // Process each child block recursively
  const processedChildren = await Promise.all(
    response.results.map(async (child: any) => {
      if (child.has_children) {
        const grandChildren = await fetchChildrenBlocks(child.id);
        return {
          ...child,
          children: grandChildren
        };
      }
      return child;
    })
  );
  
  return processedChildren;
}

// Process blocks and fetch children if needed
const processedBlocks = await Promise.all(
  blocks.results.map(async (block: any) => {
    if (block.has_children) {
      const children = await fetchChildrenBlocks(block.id);
      return {
        ...block,
        children: children
      };
    }
    return block;
  })
);

console.log('Processed Blocks with Children:', processedBlocks);

---

<Layout title={title}>
  <div class="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 mt-[74px]">
    <article class="py-12">
      <!-- Header -->
      <header class="mb-12">
        <div class="flex items-center gap-4 mb-4">
          {icon?.type === 'emoji' && (
            <span class="text-3xl">{icon.emoji}</span>
          )}
          <h1 class="text-3xl sm:text-4xl font-light text-gray-900">{title}</h1>
        </div>
        <div class="flex items-center gap-4 text-sm text-gray-500">
          <span>Last updated: {new Date(lastEdited).toLocaleDateString()}</span>
        </div>
      </header>

      <!-- Content -->
      <div class="prose prose-lg max-w-none">
        {processedBlocks.map((block: any) => (
          <NotionBlock block={block} />
        ))}
      </div>
    </article>
  </div>
</Layout>

<script>
  // Log the content when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const content = document.querySelector('.prose');
    console.log('Browser-side Content:', {
      content: content?.innerHTML,
      element: content,
      blocks: content?.children
    });
  });
</script> 