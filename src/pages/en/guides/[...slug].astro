---
import { getNotionPage, getNotionDatabase } from '../../../utils/notion';
import GuidesLayout from '../../../layouts/GuidesLayout.astro';
import NotionBlock from '../../../components/content/NotionBlock.astro';
import { Client } from '@notionhq/client';
import type { PageObjectResponse, BlockObjectResponse } from '@notionhq/client/build/src/api-endpoints';

export const prerender = true;

export async function getStaticPaths() {
  // Helper function to get page title from database
  function getPageTitle(item: any): string {
    try {
      const titleProperty = item.properties?.['Name'];
      if (titleProperty?.title?.[0]?.plain_text) {
        return titleProperty.title[0].plain_text;
      }
      return 'Untitled';
    } catch (error) {
      return 'Untitled';
    }
  }

  // Helper function to get slug from database
  function getSlug(item: any): string {
    try {
      const slugProperty = item.properties?.['slug'];
      if (slugProperty?.rich_text?.[0]?.plain_text) {
        return slugProperty.rich_text[0].plain_text;
      }
      
      return '';
    } catch (error) {
      return '';
    }
  }

  // Helper function to check if a guide is published
  function isPublished(item: any): boolean {
    try {
      const publishedProperty = item.properties?.['Published'];
      if (publishedProperty && 'checkbox' in publishedProperty) {
        return publishedProperty.checkbox === true;
      }
      return false;
    } catch (error) {
      return false;
    }
  }

  // Helper function to check if a guide is in English
  function isEnglish(item: any): boolean {
    try {
      const langProperty = item.properties?.['Lang'];
      if (langProperty && 'select' in langProperty && langProperty.select) {
        return langProperty.select.name === 'En' || langProperty.select.name === 'EN' || langProperty.select.name === 'English';
      }
      return false;
    } catch (error) {
      return false;
    }
  }

  // Get all Notion pages that match our criteria
  const notionDatabaseId = '1cb0a3cd15e3800188b5fb088dafe97c';
  const notionContent = await getNotionDatabase(notionDatabaseId);

  return notionContent
    .filter((item: any) => {
      const title = getPageTitle(item);
      const slug = getSlug(item);
      const published = isPublished(item);
      const english = isEnglish(item);
      
      // Only include items with valid titles, slugs, published status, and English language
      return title !== 'Untitled' && slug !== '' && published && english;
    })
    .map((item: any) => {
      const title = getPageTitle(item);
      const slug = getSlug(item);
      
      return {
        params: { slug },
        props: { 
          pageId: item.id,
          title,
          slug,
          icon: item.icon,
          lastEdited: item.last_edited_time
        }
      };
    });
}

const { pageId, title, lastEdited } = Astro.props;

// Fetch the page blocks
const notion = new Client({
  auth: import.meta.env.NOTION_API_KEY,
});

const blocks = await notion.blocks.children.list({
  block_id: pageId,
  page_size: 100,
});

// Function to fetch children blocks recursively
async function fetchChildrenBlocks(blockId: string): Promise<BlockObjectResponse[]> {
  const response = await notion.blocks.children.list({
    block_id: blockId,
    page_size: 200,
  });
  
  // Process each child block recursively
  const processedChildren = await Promise.all(
    response.results.map(async (child: any) => {
      if (child.has_children) {
        const grandChildren = await fetchChildrenBlocks(child.id);
        return {
          ...child,
          children: grandChildren
        };
      }
      return child;
    })
  );
  
  return processedChildren;
}

// Process blocks and fetch children if needed
const processedBlocks = await Promise.all(
  blocks.results.map(async (block: any) => {
    if (block.has_children) {
      const children = await fetchChildrenBlocks(block.id);
      return {
        ...block,
        children: children
      };
    }
    return block;
  })
);

// Extract headings from blocks for TOC
const headings: any[] = [];
processedBlocks.forEach((block: any) => {
  if (block.type === 'heading_1' || block.type === 'heading_2' || block.type === 'heading_3') {
    const text = block.heading_1?.rich_text?.[0]?.plain_text || 
                 block.heading_2?.rich_text?.[0]?.plain_text || 
                 block.heading_3?.rich_text?.[0]?.plain_text;
    if (text) {
      headings.push({
        depth: block.type === 'heading_1' ? 1 : block.type === 'heading_2' ? 2 : 3,
        text: text,
        id: text.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')
      });
    }
  }
});

---

<GuidesLayout 
  title={title} 
  lastEdited={lastEdited}
  headings={headings}
  showBreadcrumb={true}
  lang="en"
>
  <!-- Content -->
  <div class="prose prose-lg max-w-none">
    {processedBlocks.map((block: any) => (
      <NotionBlock block={block} />
    ))}
  </div>
</GuidesLayout>

<script>
  // Log the content when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Content loaded
  });
</script> 