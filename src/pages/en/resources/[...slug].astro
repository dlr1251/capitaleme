---
import { getCollection } from 'astro:content';
import ResourcesLayout from '../../../layouts/ResourcesLayout.astro';
import { marked } from 'marked';
export const prerender = true;

export async function getStaticPaths() {
  const notionEntries = await getCollection('notion');
  return notionEntries.map((entry) => ({
    params: { slug: entry.data.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const pageData = entry.data.data;
console.log('Page data:', pageData);

// Function to add IDs to headings
function addHeadingIds(html: string) {
  return html.replace(
    /<(h[1-3])>(.*?)<\/\1>/g,
    (match: string, tag: string, text: string) => {
      const slug = text
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric with hyphens
        .replace(/(^-|-$)/g, ''); // Remove leading/trailing hyphens
      return `<${tag} id="${slug}">${text}</${tag}>`;
    }
  );
}

// Function to extract headings with depth, text, and slug
function extractHeadings(html: string) {
  const headingRegex = /<(h[1-3])>(.*?)<\/\1>/g;
  const headings = [];
  let match;
  while ((match = headingRegex.exec(html)) !== null) {
    const depth = parseInt(match[1].replace('h', ''));
    const text = match[2];
    const slug = text
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric with hyphens
      .replace(/(^-|-$)/g, ''); // Remove leading/trailing hyphens
    headings.push({
      depth: depth,
      text: text,
      slug: slug,
    });
  }
  return headings;
}

// Render Markdown and add heading IDs
const htmlContentRaw = await (pageData.Content ? marked(pageData.Content) : '<p>No content available.</p>');
console.log('Raw HTML Content:', htmlContentRaw);

const htmlString = typeof htmlContentRaw === 'string' ? htmlContentRaw : await htmlContentRaw;
console.log('Processed HTML String:', htmlString);

const htmlContent = addHeadingIds(htmlString);
console.log('Final HTML Content with IDs:', htmlContent);

const headings = extractHeadings(htmlString);
console.log('Extracted Headings:', headings);

// Add browser-side logging
---
{console.log('Server-side HTML Content:', htmlContent)}
{console.log('Headings:', headings)}
<ResourcesLayout 
  title={pageData.Name} 
  frontmatter={{
    title: pageData.Name,
    summary: pageData.Summary,
    pubDate: pageData.PubDate,
    content_type: pageData.Content_Type,
    slug: pageData.Slug,
  }} 
  headings={headings}
>
  <div class="py-8 pl-4 mt-16 font-bold text-2xl md:text-3xl bg-slate-100 rounded">{pageData.Name}</div>
  <div class="content" set:html={htmlContent} />
</ResourcesLayout>

<script>
  // Log the content when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const content = document.querySelector('.content');
    console.log('Browser-side Content HTML:', content?.innerHTML);
    console.log('Content Element:', content);
  });
</script>

<style>
  html {
    scroll-behavior: smooth; /* Smooth scrolling for TOC links */
  }
  .content table {
    border-collapse: collapse;
    width: 100%;
    margin: 1rem 0;
  }
  .content th, .content td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  .content th {
    background-color: #f2f2f2;
  }
</style>