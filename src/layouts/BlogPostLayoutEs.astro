---
import Layout from './Layout.astro';
import TableOfContents from '../components/core/navigation/TableOfContents.astro';

const { title, cover, description, headings, timeToRead, lastEdited } = Astro.props;

// Custom breadcrumbs for blog posts
const customBreadcrumbs = [
  { label: 'Blog', href: '/es/blog2' },
  { label: title }
];
---

<Layout title={title} customBreadcrumbs={customBreadcrumbs}>
  <!-- Barra de progreso de lectura -->
  <div id="reading-progress-bar" class="fixed top-24 lg:top-28 left-0 h-1 bg-blue-600 z-50 transition-all" style="width:0%"></div>
  
  <div class="min-h-screen flex flex-col">
    <!-- Cover image -->
    {cover && (
      <div class="relative h-72 md:h-96 w-full overflow-hidden flex items-end justify-start bg-gray-200">
        <img src={cover.type === 'external' ? cover.external.url : cover.file.url} alt={title} class="absolute inset-0 w-full h-full object-cover object-center" />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />
        <div class="relative z-10 p-8 md:p-16">
          <h1 class="text-4xl md:text-5xl font-bold text-white drop-shadow-lg mb-2">{title}</h1>
          {description && <p class="text-lg text-white/90 max-w-2xl drop-shadow">{description}</p>}
          <div class="flex items-center gap-4 mt-4">
            <span class="text-sm text-white/80">{timeToRead} min de lectura</span>
            <span class="text-sm text-white/80">Última actualización: {new Date(lastEdited).toLocaleDateString()}</span>
          </div>
        </div>
      </div>
    )}
    
    <div class="flex flex-1 w-full max-w-screen-xl mx-auto px-2 sm:px-6 lg:px-8 gap-8 mt-8">
      <!-- Sidebar izquierda -->
      <aside class="hidden lg:block w-64 flex-shrink-0">
        <nav class="sticky top-28">
          <div class="mb-6 font-semibold text-gray-700 text-lg">Explorar</div>
          <ul class="space-y-2">
            <li><a href="/es/blog2" class="text-blue-600 hover:underline">← Todos los Artículos</a></li>
            <!-- Aquí puedes agregar más navegación/categorías -->
          </ul>
        </nav>
      </aside>
      
      <!-- Contenido principal -->
      <main class="flex-1 min-w-0">
        <slot />
        
        <!-- Sección de comentarios -->
        <section class="mt-16 bg-white rounded-xl shadow p-8 max-w-2xl mx-auto">
          <h2 class="text-2xl font-semibold mb-4">Comentarios</h2>
          <div id="comments-list" class="space-y-6 mb-6"></div>
          <form id="comment-form" class="space-y-4">
            <input type="text" id="comment-name" class="w-full border rounded px-3 py-2" placeholder="Tu nombre" required />
            <textarea id="comment-text" class="w-full border rounded px-3 py-2" placeholder="Escribe un comentario..." rows="3" required></textarea>
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Publicar Comentario</button>
          </form>
        </section>
      </main>
      
      <!-- TOC derecha -->
      <aside class="hidden xl:block w-72 flex-shrink-0">
        <div class="sticky top-28">
          <div class="mb-4 font-semibold text-gray-700 text-lg">Tabla de Contenidos</div>
          <TableOfContents headings={headings} />
        </div>
      </aside>
    </div>
  </div>

  <script>
    // Barra de progreso de lectura
    const progressBar = document.getElementById('reading-progress-bar');
    window.addEventListener('scroll', () => {
      const scrollTop = window.scrollY;
      const docHeight = document.body.scrollHeight - window.innerHeight;
      const progress = Math.min(100, (scrollTop / docHeight) * 100);
      if (progressBar) {
        progressBar.style.width = progress + '%';
      }
    });
    
    // Comentarios dummy (solo frontend)
    const comments: Array<{name: string, text: string, date: string}> = [];
    const commentsList = document.getElementById('comments-list');
    const commentForm = document.getElementById('comment-form') as HTMLFormElement;
    
    if (commentForm) {
      commentForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const nameInput = document.getElementById('comment-name') as HTMLInputElement;
        const textInput = document.getElementById('comment-text') as HTMLTextAreaElement;
        
        if (nameInput && textInput) {
          const name = nameInput.value.trim();
          const text = textInput.value.trim();
          if (name && text) {
            comments.push({ name, text, date: new Date().toLocaleString() });
            renderComments();
            commentForm.reset();
          }
        }
      });
    }
    
    function renderComments() {
      if (commentsList) {
        commentsList.innerHTML = comments.map(c => `
          <div class='border-b pb-4'>
            <div class='font-semibold text-gray-800'>${c.name} <span class='text-xs text-gray-400 ml-2'>${c.date}</span></div>
            <div class='text-gray-700 mt-1'>${c.text}</div>
          </div>
        `).join('');
      }
    }
  </script>
</Layout> 