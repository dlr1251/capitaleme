---
import Layout from './Layout.astro';
import TableOfContents from '../components/core/navigation/TableOfContents.astro';
import CLKRSidebar from '../components/features/clkr/CLKRSidebar.tsx';
import CLKRStickyHeader from '../components/features/clkr/CLKRStickyHeader.tsx';
import { getAllMenuData } from '../utils/menuDataOptimized.js';

export interface Props {
  title: string;
  description?: string;
  lang?: string;
  pathname?: string;
  headings?: any[];
  lastEdited?: string;
  readingTime?: number;
  showBreadcrumb?: boolean;
}

const { 
  title, 
  description, 
  lang = 'en', 
  pathname,
  headings = [],
  lastEdited,
  readingTime,
  showBreadcrumb = false
} = Astro.props;

// Get optimized menu data
const menuData = await getAllMenuData(lang);

// Get CLKR articles for sidebar navigation
const clkrArticles = menuData?.clkrServices || [];
const hasHeadings = headings && headings.length > 0;

// Group CLKR articles by module
const articlesByModule = clkrArticles.reduce((acc: Record<string, any[]>, article: any) => {
  const module = article.module || 'General';
  if (!acc[module]) {
    acc[module] = [];
  }
  acc[module].push(article);
  return acc;
}, {} as Record<string, any[]>);
---

<Layout title={title} description={description} lang={lang} pathname={pathname} menuData={menuData}>
  <div class="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8 mt-[74px]">
    <div class="flex gap-8">
      <!-- Left Navigation Panel -->
      <aside class="hidden lg:block w-72 shrink-0">
        <div class="sticky top-32 h-[calc(100vh-8rem)]">
          <CLKRSidebar 
            client:load
            articlesByModule={articlesByModule}
            currentSlug={Astro.params.slug}
            lang={lang}
          />
        </div>
      </aside>

      <!-- Main Content -->
      <article class="flex-1 min-w-0">
        <!-- Breadcrumb -->
        {showBreadcrumb && (
          <nav class="mb-6" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
              <li><a href={`/${lang}`} class="hover:text-gray-700">{lang === 'es' ? 'Inicio' : 'Home'}</a></li>
              <li class="flex items-center">
                <span class="mx-2">/</span>
                <a href={`/${lang}/clkr`} class="hover:text-gray-700">CLKR</a>
              </li>
              <li class="flex items-center">
                <span class="mx-2">/</span>
                <span class="text-gray-900">{title}</span>
              </li>
            </ol>
          </nav>
        )}

        <!-- Sticky Header -->
        <CLKRStickyHeader 
          client:load
          title={title}
          lastEdited={lastEdited}
          readingTime={readingTime}
          lang={lang}
          showBreadcrumb={showBreadcrumb}
          currentSlug={Astro.params.slug}
        />

        <!-- Header -->
        <header class="mb-8">
          <h1 class="text-3xl sm:text-4xl font-light text-gray-900 mb-4">{title}</h1>
          {description && (
            <p class="text-lg text-gray-600 max-w-3xl mb-4">
              {description}
            </p>
          )}
          
          <!-- Meta information -->
          {(lastEdited || readingTime) && (
            <div class="flex items-center gap-6 text-sm text-gray-500">
              {lastEdited && (
                <div class="flex items-center gap-2">
                  <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                  <span>
                    {lang === 'es' ? 'Última actualización' : 'Last updated'}: {new Date(lastEdited).toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US')}
                  </span>
                </div>
              )}
              {readingTime && (
                <div class="flex items-center gap-2">
                  <span class="w-2 h-2 bg-blue-400 rounded-full"></span>
                  <span>
                    {lang === 'es' ? 'Tiempo de lectura' : 'Reading time'}: {readingTime} {lang === 'es' ? 'min' : 'min'}
                  </span>
                </div>
              )}
            </div>
          )}
        </header>

        <!-- Content -->
        <div class="prose prose-lg max-w-none prose-headings:scroll-mt-20">
          <slot />
        </div>
      </article>

      <!-- Right Table of Contents -->
      {hasHeadings && (
        <aside class="hidden xl:block w-80 shrink-0">
          <div class="sticky top-32">
            <TableOfContents headings={headings} lang={lang} />
          </div>
        </aside>
      )}
    </div>
  </div>
</Layout>

<style>
  /* Smooth scroll behavior for the entire page */
  html {
    scroll-behavior: smooth;
  }

  /* Ensure headings have proper scroll margin for navbar offset */
  :global(h2, h3, h4, h5, h6) {
    scroll-margin-top: 120px;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Ensure sticky section title works properly */
  :global(.sticky-section-title) {
    position: sticky;
    top: 0;
    z-index: 10;
    background: white;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.75rem;
    margin-bottom: 1rem;
  }

  /* Scrollable sidebar styling */
  :global(.overflow-y-auto) {
    scrollbar-width: thin;
    scrollbar-color: #d1d5db transparent;
  }

  :global(.overflow-y-auto::-webkit-scrollbar) {
    width: 6px;
  }

  :global(.overflow-y-auto::-webkit-scrollbar-track) {
    background: transparent;
  }

  :global(.overflow-y-auto::-webkit-scrollbar-thumb) {
    background-color: #d1d5db;
    border-radius: 3px;
  }

  :global(.overflow-y-auto::-webkit-scrollbar-thumb:hover) {
    background-color: #9ca3af;
  }
</style> 