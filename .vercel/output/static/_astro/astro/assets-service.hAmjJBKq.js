const _="modulepreload",C=function(e){return"/"+e},b={},L=function(t,r,i){let o=Promise.resolve();if(r&&r.length>0){const n=document.getElementsByTagName("link");o=Promise.all(r.map(s=>{if(s=C(s),s in b)return;b[s]=!0;const a=s.endsWith(".css"),g=a?'[rel="stylesheet"]':"";if(!!i)for(let m=n.length-1;m>=0;m--){const h=n[m];if(h.href===s&&(!a||h.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${s}"]${g}`))return;const l=document.createElement("link");if(l.rel=a?"stylesheet":_,a||(l.as="script",l.crossOrigin=""),l.href=s,document.head.appendChild(l),a)return new Promise((m,h)=>{l.addEventListener("load",m),l.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${s}`)))})}))}return o.then(()=>t()).catch(n=>{const s=new Event("vite:preloadError",{cancelable:!0});if(s.payload=n,window.dispatchEvent(s),!s.defaultPrevented)throw n})},ae={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},oe={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,r,i)=>`Unable to render \`${e}\`.

${i>0?`There ${r?"are":"is"} ${i} renderer${r?"s":""} configured in your \`astro.config.mjs\` file,
but ${r?"none were":"it was not"} able to server-side render \`${e}\`.`:`No valid renderer was found ${t?`for the \`.${t}\` file extension.`:"for this file extension."}`}`,hint:e=>`Did you mean to enable the ${e} integration?

See https://docs.astro.build/en/core-concepts/framework-components/ for more information on how to install and configure integrations.`},ce={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,r)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${r}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},le={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},me={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},he={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},de={name:"ImageMissingAlt",title:'Image missing required "alt" property.',message:'Image missing "alt" property. "alt" text is required to describe important images on the page.',hint:'Use an empty string ("") for decorative images.'},N={name:"InvalidImageService",title:"Error while loading image service.",message:"There was an error loading the configured image service. Please see the stack trace for more information."},v={name:"MissingImageDimension",title:"Missing image dimensions",message:(e,t)=>`Missing ${e==="both"?"width and height attributes":`${e} attribute`} for ${t}. When using remote images, both dimensions are always required in order to avoid CLS.`,hint:"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets)."},S={name:"UnsupportedImageFormat",title:"Unsupported image format",message:(e,t,r)=>`Received unsupported format \`${e}\` from \`${t}\`. Currently only ${r.join(", ")} are supported by our image services.`,hint:"Using an `img` tag directly instead of the `Image` component might be what you're looking for."},x={name:"UnsupportedImageConversion",title:"Unsupported image conversion",message:"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."},I={name:"ExpectedImage",title:"Expected src to be an image.",message:(e,t,r)=>`Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${e}\` (type: \`${t}\`).

Full serialized options received: \`${r}\`.`,hint:"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."},$={name:"ExpectedImageOptions",title:"Expected image options.",message:e=>`Expected getImage() parameter to be an object. Received \`${e}\`.`},j={name:"IncompatibleDescriptorOptions",title:"Cannot set both `densities` and `widths`",message:"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",hint:"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."},A={name:"LocalImageUsedWrongly",title:"Local images must be imported.",message:e=>`\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${e}\`.`,hint:"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections) See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."},ge={name:"AstroGlobUsedOutside",title:"Astro.glob() used outside of an Astro file.",message:e=>`\`Astro.glob(${e})\` can only be used in \`.astro\` files. \`import.meta.glob(${e})\` can be used instead to achieve a similar result.`,hint:"See Vite's documentation on `import.meta.glob` for more information: https://vitejs.dev/guide/features.html#glob-import"},fe={name:"AstroGlobNoMatch",title:"Astro.glob() did not match any files.",message:e=>`\`Astro.glob(${e})\` did not return any matching files. Check the pattern for typos.`},k={name:"MissingSharp",title:"Could not find Sharp.",message:"Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.",hint:"See Sharp's installation instructions for more information: https://sharp.pixelplumbing.com/install. If you are not relying on `astro:assets` to optimize, transform, or process any images, you can configure a passthrough image service instead of installing Sharp. See https://docs.astro.build/en/reference/errors/missing-sharp for more information.\n\nSee https://docs.astro.build/en/guides/images/#default-image-service for more information on how to migrate to another image service."},ue={name:"UnknownContentCollectionError",title:"Unknown Content Collection Error."};function q(e){return e.replace(/\r\n|\r(?!\n)|\n/g,`
`)}function H(e,t){if(!t||t.line===void 0||t.column===void 0)return"";const r=q(e).split(`
`).map(s=>s.replace(/\t/g,"  ")),i=[];for(let s=-2;s<=2;s++)r[t.line+s]&&i.push(t.line+s);let o=0;for(const s of i){let a=`> ${s}`;a.length>o&&(o=a.length)}let n="";for(const s of i){const a=s===t.line-1;n+=a?"> ":"  ",n+=`${s+1} | ${r[s]}
`,a&&(n+=`${Array.from({length:o}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^
`)}return n}class f extends Error{loc;title;hint;frame;type="AstroError";constructor(t,...r){super(...r);const{name:i,title:o,message:n,stack:s,location:a,hint:g,frame:c}=t;this.title=o,this.name=i,n&&(this.message=n),this.stack=s||this.stack,this.loc=a,this.hint=g,this.frame=c}setLocation(t){this.loc=t}setName(t){this.name=t}setMessage(t){this.message=t}setHint(t){this.hint=t}setFrame(t,r){this.frame=H(t,r)}static is(t){return t.type==="AstroError"}}function pe(e){return e[0]==="/"?e:"/"+e}function F(e){return e.endsWith("/")?e.slice(0,e.length-1):e}function D(e){return e.startsWith("/")?e.substring(1):e}function z(e){return e.replace(/^\/|\/$/g,"")}function G(e){return typeof e=="string"||e instanceof String}function V(...e){return e.filter(G).map((t,r)=>r===0?F(t):r===e.length-1?D(t):z(t)).join("/")}function O(e){return/^(http|ftp|https|ws):?\/\//.test(e)||e.startsWith("data:")}const M=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],E="webp",W=["src","width","height","format","quality"];function B(e){return e?"transform"in e:!1}function J(e){let t=parseInt(e);return Number.isNaN(t)?e:t}const u={propertiesToHash:W,validateOptions(e){if(!e.src||typeof e.src!="string"&&typeof e.src!="object")throw new f({...I,message:I.message(JSON.stringify(e.src),typeof e.src,JSON.stringify(e,(t,r)=>r===void 0?null:r))});if(p(e.src)){if(!M.includes(e.src.format))throw new f({...S,message:S.message(e.src.format,e.src.src,M)});if(e.widths&&e.densities)throw new f(j);if(e.src.format==="svg"&&(e.format="svg"),e.src.format==="svg"&&e.format!=="svg"||e.src.format!=="svg"&&e.format==="svg")throw new f(x)}else{if(e.src.startsWith("/@fs/")||!O(e.src)&&!e.src.startsWith("/"))throw new f({...A,message:A.message(e.src)});let t;if(!e.width&&!e.height?t="both":!e.width&&e.height?t="width":e.width&&!e.height&&(t="height"),t)throw new f({...v,message:v.message(t,e.src)})}return e.format||(e.format=E),e.width&&(e.width=Math.round(e.width)),e.height&&(e.height=Math.round(e.height)),e},getHTMLAttributes(e){const{targetWidth:t,targetHeight:r}=T(e),{src:i,width:o,height:n,format:s,quality:a,densities:g,widths:c,formats:l,...m}=e;return{...m,width:t,height:r,loading:m.loading??"lazy",decoding:m.decoding??"async"}},getSrcSet(e){const t=[],{targetWidth:r}=T(e),{widths:i,densities:o}=e,n=e.format??E;let s=e.width,a=1/0;p(e.src)&&(s=e.src.width,a=s);const{width:g,height:c,...l}=e,m=[];if(o){const h=o.map(d=>typeof d=="number"?d:parseFloat(d)),w=h.sort().map(d=>Math.round(r*d));m.push(...w.map((d,P)=>({maxTargetWidth:Math.min(d,a),descriptor:`${h[P]}x`})))}else i&&m.push(...i.map(h=>({maxTargetWidth:Math.min(h,a),descriptor:`${h}w`})));for(const{maxTargetWidth:h,descriptor:w}of m){const d={...l};h!==s?d.width=h:e.width&&e.height&&(d.width=e.width,d.height=e.height),t.push({transform:d,descriptor:w,attributes:{type:`image/${n}`}})}return t},getURL(e,t){const r=new URLSearchParams;if(p(e.src))r.append("href",e.src.src);else if(ee(e.src,t))r.append("href",e.src);else return e.src;return Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach(([n,s])=>{e[s]&&r.append(n,e[s].toString())}),`${V("/","/_image")}?${r}`},parseURL(e){const t=e.searchParams;return t.has("href")?{src:t.get("href"),width:t.has("w")?parseInt(t.get("w")):void 0,height:t.has("h")?parseInt(t.get("h")):void 0,format:t.get("f"),quality:t.get("q")}:void 0}};function T(e){let t=e.width,r=e.height;if(p(e.src)){const i=e.src.width/e.src.height;r&&!t?t=Math.round(r*i):t&&!r?r=Math.round(t/i):!t&&!r&&(t=e.src.width,r=e.src.height)}return{targetWidth:t,targetHeight:r}}function Q(e,t){return X(e,t.protocol)&&R(e,t.hostname,!0)&&K(e,t.port)&&Y(e,t.pathname,!0)}function K(e,t){return!t||t===e.port}function X(e,t){return!t||t===e.protocol.slice(0,-1)}function R(e,t,r){if(t){if(!r||!t.startsWith("*"))return t===e.hostname;if(t.startsWith("**.")){const i=t.slice(2);return i!==e.hostname&&e.hostname.endsWith(i)}else if(t.startsWith("*.")){const i=t.slice(1);return e.hostname.replace(i,"").split(".").filter(Boolean).length===1}}else return!0;return!1}function Y(e,t,r){if(t){if(!r||!t.endsWith("*"))return t===e.pathname;if(t.endsWith("/**")){const i=t.slice(0,-2);return i!==e.pathname&&e.pathname.startsWith(i)}else if(t.endsWith("/*")){const i=t.slice(0,-1);return e.pathname.replace(i,"").split("/").filter(Boolean).length===1}}else return!0;return!1}function p(e){return typeof e=="object"}function Z(e){return typeof e=="string"}function ee(e,{domains:t=[],remotePatterns:r=[]}){if(!O(e))return!1;const i=new URL(e);return t.some(o=>R(i,o))||r.some(o=>Q(i,o))}async function te(){if(!globalThis?.astroAsset?.imageService){const{default:e}=await L(()=>Promise.resolve().then(()=>ne),void 0).catch(t=>{const r=new f(N);throw r.cause=t,r});return globalThis.astroAsset||(globalThis.astroAsset={}),globalThis.astroAsset.imageService=e,e}return globalThis.astroAsset.imageService}async function we(e,t){if(!e||typeof e!="object")throw new f({...$,message:$.message(JSON.stringify(e))});const r=await te(),i={...e,src:typeof e.src=="object"&&"then"in e.src?(await e.src).default??await e.src:e.src},o=p(i.src)?i.src.clone??i.src:i.src;i.src=o;const n=r.validateOptions?await r.validateOptions(i,t):i,s=r.getSrcSet?await r.getSrcSet(n,t):[];let a=await r.getURL(n,t),g=await Promise.all(s.map(async c=>({transform:c.transform,url:await r.getURL(c.transform,t),descriptor:c.descriptor,attributes:c.attributes})));if(B(r)&&globalThis.astroAsset.addStaticImage&&!(Z(n.src)&&a===n.src)){const c=r.propertiesToHash??W;a=globalThis.astroAsset.addStaticImage(n,c),g=s.map(l=>({transform:l.transform,url:globalThis.astroAsset.addStaticImage(l.transform,c),descriptor:l.descriptor,attributes:l.attributes}))}return{rawOptions:i,options:n,src:a,srcSet:{values:g,attribute:g.map(c=>`${c.url} ${c.descriptor}`).join(", ")},attributes:r.getHTMLAttributes!==void 0?await r.getHTMLAttributes(n,t):{}}}let y;const U={low:25,mid:50,high:80,max:100};async function re(){let e;try{e=(await L(()=>import("../index.mHrpxE4_.js").then(t=>t.i),__vite__mapDeps([]))).default}catch{throw new f(k)}return e}const ie={validateOptions:u.validateOptions,getURL:u.getURL,parseURL:u.parseURL,getHTMLAttributes:u.getHTMLAttributes,getSrcSet:u.getSrcSet,async transform(e,t){y||(y=await re());const r=t;if(r.format==="svg")return{data:e,format:"svg"};let i=y(e,{failOnError:!1,pages:-1});if(i.rotate(),r.height&&!r.width?i.resize({height:Math.round(r.height)}):r.width&&i.resize({width:Math.round(r.width)}),r.format){let s;if(r.quality){const a=J(r.quality);typeof a=="number"?s=a:s=r.quality in U?U[r.quality]:void 0}i.toFormat(r.format,{quality:s})}const{data:o,info:n}=await i.toBuffer({resolveWithObject:!0});return{data:o,format:n.format}}};var se=ie;const ne=Object.freeze(Object.defineProperty({__proto__:null,default:se},Symbol.toStringTag,{value:"Module"}));export{f as A,he as I,ae as M,me as N,ue as U,L as _,le as a,oe as b,ce as c,ge as d,fe as e,de as f,we as g,p as i,pe as p};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
